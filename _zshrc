# vim: ft=zsh

[ ! -d "$HOME/.zomg/vendor" ] && mkdir -p ~/.zomg/vendor

setopt INTERACTIVE_COMMENTS
setopt RC_QUOTES

source ~/.zomg/setup/autosuggestions.zsh
source ~/.zomg/setup/history-substring-search.zsh
source ~/.zomg/setup/completions.zsh
source ~/.zomg/setup/history.zsh
source ~/.zomg/setup/prompt.zsh

setopt AUTO_CD
setopt PUSHD_SILENT
unsetopt CLOBBER

bindkey -e
bindkey "^[[3~" delete-char

alias e='tv'
alias ee='$EDITOR `git ls-files --others --modified --exclude-standard`'
alias lah='ls -lah'
alias l='ls'
alias sl='ls'
alias s='sudo'
alias dush='du -sh'
alias be='bundle exec'
alias it='git'
alias qgit='git'
alias gt='git --no-pager'
alias tmux='tmux -2'
alias :e='vim'
alias rg='\rg $([ -e .git/rgignore ] && printf --ignore-file=.git/rgignore)'

if [ -d "$HOME/Notes" ]; then
  alias notes='cd ~/Notes'
elif [ -d "$HOME/notes" ]; then
  alias notes='cd ~/notes'
fi

if [ -d "$HOME/Downloads" ]; then
  alias downloads='cd ~/Downloads'
fi

if [ -d "$HOME/Desktop" ]; then
  alias desktop='cd ~/Desktop'
fi

dots() {
  dotdir="$HOME/.dotfiles"
  if [ -L "$dotdir" ]; then
    dotdir="$(readlink "$dotdir")"
  fi
  if [ ! -d "$dotdir" ]; then
    echo "ERROR: $dotdir does not exist."
    return 1
  fi
  cd "$dotdir" || return 1
}

xo() { [[ -n "$1" ]] && top -l1 | grep "$1" | cut -d ' ' -f 1 || echo "usage: $0 <process name>" ;  }
xoxo() { [[ -n "$1" ]] && xo "$1" | xargs kill -9 || echo "usage: $0 <process name>" ; }

[ -d ~/.nodenv/bin ] && export PATH="$HOME/.nodenv/bin:$PATH"
[ -d ~/.nodenv ] && eval "$(nodenv init -)"
[ -d ~/.rbenv ] && eval "$(rbenv init -)"
[ -d ~/.local/bin ] && export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.bin_local:$HOME/.bin:$PATH"
export PATH=".git/safe/../../bin:$PATH"

export FZF_DEFAULT_OPTS="--no-mouse"

export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

export BAT_CONFIG_PATH="$HOME/.batrc"

if command -v nvim &> /dev/null; then
  export VISUAL='nvim'
  export EDITOR='nvim'
fi

case "$(uname -s)" in
  Linux)
    source ~/.zshrc_linux
    ;;
  Darwin)
    source ~/.zshrc_osx
    ;;
  FreeBSD)
    source ~/.zshrc_bsd
    ;;
esac

[ -f ~/.zshrc_local ] && source ~/.zshrc_local

(( $+commands[atuin] )) && eval "$(atuin init zsh)"
