[pull]
	rebase = true

[push]
	default = simple

[fetch]
	prune = true

[init]
	defaultBranch = main
	templatedir = ~/.git_template

[diff]
	wsErrorHighlight = old,new

[log]
	wsErrorHighlight = old,new

[user]
	name = Zach Ahn
	email = engineering@zachahn.com

[alias]
	af = add -f
	ai = "!f() { git add --intent-to-add ${1+} ${1--A} ; }; f"
	amend = commit --amend --verbose
	ap = add --patch
	bd = branch --delete
	bm = branch --move
	branches = for-each-ref --sort=-committerdate --format='%(color:cyan)%(HEAD) %(color:reset)%(refname:short)' refs/heads/
	buu = branch --unset-upstream
	co = checkout
	cob = checkout -b
	cp = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
	cstash = "!f() { git add . ; git commit --message 'Stashing changes via commit' ; }; f"
	cv = commit --verbose
	cva = "!f() { git add . ; git cv ; }; f"
	cvam = !git add . && git commit --message
	cvm = commit --message
	delete-gone = "!f() { git branch -vv | grep ': gone]' | cut -d' ' -f3 | xargs git branch -d ; } ; f"
	dp = "!git --no-pager diff"
	everything = log --pretty=fuller --patch
	exclude = "!mkdir .git/info 2> /dev/null ; touch .git/info/exclude"
	f = "!f() { git fetch ; git status ; }; f"
	git = !git
	ia = ai
	jedi = "!f() { current=$(git rev-parse --abbrev-ref HEAD) ; if git rev-parse --abbrev-ref \"${current}@{upstream}\" > /dev/null ; then git push --force-with-lease; else git push -u origin ${current} ; fi ; }; f"
	last = log --pretty=fuller --patch -n 1 HEAD
	lg = log --oneline -n 20
	long = log --graph --abbrev-commit --decorate --date=relative --all --oneline
	lp = "!f() { current=$(git rev-parse --abbrev-ref HEAD); if git rev-parse -q --verify origin/${current} > /dev/null ; then git log --oneline origin/${current}..HEAD ; fi; }; f"
	m = merge
	ma = merge --abort
	nvm = "!f() { git uncommit; git unstage ; }; f"
	pf = jedi
	pu = "!f() { git fetch ; git status ; git pull ; }; f"
	ra = rebase --abort
	rc = !git add . && git rebase --continue
	redit = reset HEAD~1
	reorder = "!f() { git rebase --ignore-date HEAD~$1; }; f"
	rs = rebase --skip
	safe = !mkdir .git/safe
	st = status
	trash = "!f() { git checkout -- ${1+$@} ${1-.}; }; f"
	uncommit = reset --soft HEAD~1
	unstage = reset HEAD --

# vim: syntax=gitconfig
