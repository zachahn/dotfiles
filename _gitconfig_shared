# To apply the configuration from this file, append this to your ~/.gitconfig:
# [include]
#	path = .gitconfig_shared

[fetch]
	prune = true

[alias]
	bd = branch -d
	co = checkout
	cob = checkout -b
	cv = commit -v
	cva = commit -v -a
	changes = diff master...HEAD
	changed-files = diff --name-status master...HEAD
	df = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
	lb = log --oneline master..HEAD
	lp = "!gitlp() { current=$(git rev-parse --abbrev-ref HEAD); if git rev-parse -q --verify origin/${current} > /dev/null ; then git log --oneline origin/${current}..HEAD ; fi; }; gitlp"
	lg = log --oneline -n 20
	long = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	nvm = reset --soft HEAD~1
	amend = commit --amend
	ri = "!gitri() { git rebase -i HEAD~$1; }; gitri"
	last = log -1 HEAD
	unstage = reset HEAD --
	st = status
	pf = push --force-with-lease
	ignorant = "!gitignorant() { current=$(git rev-parse --abbrev-ref HEAD) ; if git rev-parse --abbrev-ref \"${current}@{upstream}\" > /dev/null ; then git push; else git push -u origin ${current} ; fi ; }; gitignorant"
