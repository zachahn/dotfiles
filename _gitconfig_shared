# To apply the configuration from this file, append this to your ~/.gitconfig:
# [include]
#	path = .gitconfig_shared

[push]
	default = simple

[fetch]
	prune = true

[core]
	excludesfile = ~/.gitignore_global

[init]
	templatedir = ~/.git_template

[alias]
	af = add -f
	ai = "!f() { git add --intent-to-add ${1+} ${1--A} ; }; f"
	amend = commit --amend
	ap = add -p
	bd = branch -d
	bm = branch -m
	branches = for-each-ref --sort=-committerdate --format='%(color:cyan)%(HEAD) %(color:reset)%(refname:short)' refs/heads/
	changed-files = diff --name-status origin/master...HEAD
	changes = diff origin/master...HEAD
	co = checkout
	cob = checkout -b
	com = checkout master
	cp = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
	cstash = "!f() { git add . ; git commit -m 'cstash!' ; }; f"
	ctags = !.git/hooks/ctags
	cv = commit -v
	cva = "!f() { git add . ; git cv ; }; f"
	cvam = !git add . && git cv -m
	delete-gone = "!f() { git branch -vv | grep ': gone]' | cut -d' ' -f3 | xargs git branch -d ; } ; f"
	df = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
	dp = "!git --no-pager diff"
	everything = log --pretty=fuller --patch
	f = "!f() { git fetch ; git status ; }; f"
	fu = "!f() { git commit --amend --no-edit ; }; f"
	fua = "!f() { git add . ; git fu ; }; f"
	ia = "!f() { git ai ; }; f"
	ignorant = "!f() { current=$(git rev-parse --abbrev-ref HEAD) ; if git rev-parse --abbrev-ref \"${current}@{upstream}\" > /dev/null ; then git push; else git push -u origin ${current} ; fi ; }; f"
	last = log --pretty=fuller --patch -1 HEAD
	lg = log --oneline -n 20
	long = log --graph --abbrev-commit --decorate --date=relative --all --oneline
	lp = "!f() { current=$(git rev-parse --abbrev-ref HEAD); if git rev-parse -q --verify origin/${current} > /dev/null ; then git log --oneline origin/${current}..HEAD ; fi; }; f"
	ls = log --oneline origin/master..HEAD
	m = merge
	ma = merge --abort
	nvm = "!f() { git uncommit; git unstage ; }; f"
	note = "!f() { git_top_level=$(git rev-parse --git-dir); vim \"${git_top_level}/NOTES.md\" ; }; f"
	pf = push --force-with-lease
	pu = "!f() { git fetch ; git status ; git pull ; }; f"
	ra = rebase --abort
	rc = !git add . && git rebase --continue
	redit = reset HEAD~1
	ri = "!f() { git rebase -i HEAD~$1; }; f"
	ria = "!f() { git rebase -i HEAD~$(git ls | wc -l | awk '{print $1}') ; }; f"
	rom = "!f() { git fetch ; git rebase origin/master ; } ; f"
	rs = rebase --skip
	safe = !mkdir .git/safe
	st = status
	trash = "!f() { git checkout -- ${1+$@} ${1-.}; }; f"
	uncommit = reset --soft HEAD~1
	unstage = reset HEAD --

# vim: syntax=gitconfig
